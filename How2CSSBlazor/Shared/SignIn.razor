@page "/signin"
@inject NavigationManager UriHelper
@inject Blazored.LocalStorage.ILocalStorageService localStore

<form class="w-50 mx-auto mt-5">
    <div class="form-group">
        <div>
            <input type="email" class="form-control" placeholder="Enter email" id="email" name="useremail" @bind="signInUser.Email">
        </div>
        <div class="alert alert-danger" role="alert">
            @AlertMes
        </div>
    </div>
    <div class="form-group">
        <div>
            <input type="password" class="form-control" placeholder="Enter password" id="pwd" name="userpass" @bind="signInUser.Password">
        </div>
        <div class="alert alert-danger" role="alert">
            Authentication error!
        </div>
    </div>
    <button type="submit" class="btn btn-primary" @onclick="Login" @onclick:preventDefault="true">Submit</button>
</form>

@code {
    private SignInUser signInUser { get; set; } = new SignInUser() { Email = "ilivocs@gmail.com", Password = "_Aa123456" };
    private string AlertMes { get; set; } = "Authentication error!";
    private bool isLogged = false;

    protected async override Task OnInitializedAsync()
    {
        AlertMes = await localStore.GetItemAsync<string>("item");
    }

    private async void Login()
    {
        HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.PostAsJsonAsync("https://localhost:5001/api/users/login", signInUser);
        if (response.IsSuccessStatusCode)
        {
            isLogged = await response.Content.ReadAsAsync<bool>();
        }
        if (isLogged)
        {
            await localStore.SetItemAsync<string>("currentuser",signInUser.Email);
            UriHelper.NavigateTo("/account");
        }
        else
        {
            AlertMes = "false";
        }
        //UriHelper.NavigateTo("/account");
    }
}
