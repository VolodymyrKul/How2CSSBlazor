@page "/antachievs"
@inject Blazored.LocalStorage.ILocalStorageService localStore

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous">
<form class="w-75 mx-auto mt-4 mb-4">
    <div class="form-group">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="basic-addon2" name="useremail" @bind="searchUserEmail">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="loadAchievs" @onclick:preventDefault="true"><i class="fas fa-search"></i></button>
            </div>
        </div>
        <div class="alert alert-danger" role="alert">
            User did not find!
        </div>
    </div>
</form>
<div class="table-responsive">
    <table class="table table-striped table-bordered mx-auto mt-4">
        <thead>
            <tr>
                <th>Test title<span @onclick="byTitleSort" style="float: right; cursor: pointer;"><i class="@TitleCssClass()"></i></span></th>
                <th>Completed/All<span @onclick="byComCountSort" style="float: right; cursor: pointer;"><i class="@ComCountCssClass()"></i></span></th>
                <th>Correct/All<span @onclick="byCorCountSort" style="float: right; cursor: pointer;"><i class="@CorCountCssClass()"></i></span></th>
                <th>Current mark<span @onclick="byCurMarkSort" style="float: right; cursor: pointer;"><i class="@CurMarkCssClass()"></i></span></th>
                <th>Try number<span @onclick="byTryNumSort" style="float: right; cursor: pointer;"><i class="@TryNumCssClass()"></i></span></th>
                <th>Date<span @onclick="bySaveDateSort" style="float: right; cursor: pointer;"><i class="@SaveDateCssClass()"></i></span></th>
            </tr>
        </thead>
        <tbody>
            @if (simpleAchievDatas.Count==0)
            {
                <tr>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
            }
            else
            {
                @foreach (var item in simpleAchievDatas)
                {
                    <tr>
                        <td>@item.TrainingTestTitle</td>
                        <td>@item.CompletedCount</td>
                        <td>@item.CorrectCount</td>
                        <td>@item.CurrentMark</td>
                        <td>@item.TryCount</td>
                        <td>@item.SaveDate.ToString("dd.MM.yyyy")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<SimpleAchievData> simpleAchievDatas { get; set; } = new List<SimpleAchievData>();
    HttpClient client = new HttpClient();

    public bool titleMode { get; set; } = false;
    public bool comCountMode { get; set; } = false;
    public bool corCountMode { get; set; } = false;
    public bool curMarkMode { get; set; } = false;
    public bool tryNumMode { get; set; } = false;
    public bool saveDateMode { get; set; } = false;
    public string searchUserEmail { get; set; } = "turyanmykh@gmail.com";
    public bool isFounded { get; set; } = false;


    private async void loadAchievs()
    {
        HttpResponseMessage response = await client.GetAsync("https://localhost:5001/api/users/search/" + searchUserEmail);
        if (response.IsSuccessStatusCode)
        {
            isFounded = await response.Content.ReadAsAsync<bool>();
            if (isFounded)
            {
                response = await client.GetAsync("https://localhost:5001/api/achievdatas/simple/" + searchUserEmail);
                if (response.IsSuccessStatusCode)
                {
                    simpleAchievDatas = await response.Content.ReadAsAsync<List<SimpleAchievData>>();
                }
                else
                {
                    simpleAchievDatas = null;
                }
            }
            else
            {
                simpleAchievDatas = null;
            }
        }
        else
        {
            simpleAchievDatas = null;
        }
    }

    public void byTitleSort()
    {
        if (titleMode)
        {
            simpleAchievDatas.Sort((a, b) => a.TrainingTestTitle.CompareTo(b.TrainingTestTitle));
        }
        else
        {
            simpleAchievDatas.Sort((a, b) => b.TrainingTestTitle.CompareTo(a.TrainingTestTitle));
        }
        titleMode = !titleMode;
    }

    public void byComCountSort()
    {
        if (comCountMode)
        {
            simpleAchievDatas.Sort((a, b) => a.CompletedCount.CompareTo(b.CompletedCount));
        }
        else
        {
            simpleAchievDatas.Sort((a, b) => b.CompletedCount.CompareTo(a.CompletedCount));
        }
        comCountMode = !comCountMode;
    }

    public void byCorCountSort()
    {
        if (corCountMode)
        {
            simpleAchievDatas.Sort((a, b) => a.CorrectCount.CompareTo(b.CorrectCount));
        }
        else
        {
            simpleAchievDatas.Sort((a, b) => b.CorrectCount.CompareTo(a.CorrectCount));
        }
        corCountMode = !corCountMode;
    }

    public void byCurMarkSort()
    {
        if (curMarkMode)
        {
            simpleAchievDatas.Sort((a, b) => (a.CurrentMark > b.CurrentMark) ? 1 : (b.CurrentMark > a.CurrentMark) ? -1 : 0);
        }
        else
        {
            simpleAchievDatas.Sort((a, b) => (a.CurrentMark < b.CurrentMark) ? 1 : (b.CurrentMark < a.CurrentMark) ? -1 : 0);
        }
        curMarkMode = !curMarkMode;
    }

    public void byTryNumSort()
    {
        if (tryNumMode)
        {
            simpleAchievDatas.Sort((a, b) => (a.TryCount > b.TryCount) ? 1 : (b.TryCount > a.TryCount) ? -1 : 0);
        }
        else
        {
            simpleAchievDatas.Sort((a, b) => (a.TryCount < b.TryCount) ? 1 : (b.TryCount < a.TryCount) ? -1 : 0);
        }
        tryNumMode = !tryNumMode;
    }

    public void bySaveDateSort()
    {
        if (saveDateMode)
        {
            simpleAchievDatas.Sort((a, b) => (a.SaveDate > b.SaveDate) ? 1 : (b.SaveDate > a.SaveDate) ? -1 : 0);
        }
        else
        {
            simpleAchievDatas.Sort((a, b) => (a.SaveDate < b.SaveDate) ? 1 : (b.SaveDate < a.SaveDate) ? -1 : 0);
        }
        saveDateMode = !saveDateMode;
    }

    string TitleCssClass()
    {
        var cssClass = new List<string>();
        cssClass.Add("fas");
        cssClass.Add("fa-2x");
        if (titleMode)
        {
            cssClass.Add("fa-caret-up");
        }
        else
        {
            cssClass.Add("fa-caret-down");
        }
        return string.Join(' ', cssClass);
    }
    string ComCountCssClass()
    {
        var cssClass = new List<string>();
        cssClass.Add("fas");
        cssClass.Add("fa-2x");
        if (comCountMode)
        {
            cssClass.Add("fa-caret-up");
        }
        else
        {
            cssClass.Add("fa-caret-down");
        }
        return string.Join(' ', cssClass);
    }
    string CorCountCssClass()
    {
        var cssClass = new List<string>();
        cssClass.Add("fas");
        cssClass.Add("fa-2x");
        if (corCountMode)
        {
            cssClass.Add("fa-caret-up");
        }
        else
        {
            cssClass.Add("fa-caret-down");
        }
        return string.Join(' ', cssClass);
    }
    string CurMarkCssClass()
    {
        var cssClass = new List<string>();
        cssClass.Add("fas");
        cssClass.Add("fa-2x");
        if (curMarkMode)
        {
            cssClass.Add("fa-caret-up");
        }
        else
        {
            cssClass.Add("fa-caret-down");
        }
        return string.Join(' ', cssClass);
    }
    string TryNumCssClass()
    {
        var cssClass = new List<string>();
        cssClass.Add("fas");
        cssClass.Add("fa-2x");
        if (tryNumMode)
        {
            cssClass.Add("fa-caret-up");
        }
        else
        {
            cssClass.Add("fa-caret-down");
        }
        return string.Join(' ', cssClass);
    }
    string SaveDateCssClass()
    {
        var cssClass = new List<string>();
        cssClass.Add("fas");
        cssClass.Add("fa-2x");
        if (saveDateMode)
        {
            cssClass.Add("fa-caret-up");
        }
        else
        {
            cssClass.Add("fa-caret-down");
        }
        return string.Join(' ', cssClass);
    }
}
